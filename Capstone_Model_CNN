{
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 1,
      "metadata": {
        "id": "0TZXcbHu1f3S"
      },
      "outputs": [],
      "source": [
        "import os\n",
        "import tensorflow as tf\n",
        "from tensorflow.keras.preprocessing.image import ImageDataGenerator\n",
        "import matplotlib.pyplot as plt\n",
        "from google.colab import drive\n",
        "from keras.models import  Model, Sequential\n",
        "import numpy as np"
      ],
      "id": "0TZXcbHu1f3S"
    },
    {
      "cell_type": "markdown",
      "source": [
        "## **Import Data**"
      ],
      "metadata": {
        "id": "Bt_bdhQg9e35"
      },
      "id": "Bt_bdhQg9e35"
    },
    {
      "cell_type": "code",
      "source": [
        "tf.test.gpu_device_name()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 36
        },
        "id": "afAxKmXZ1kyz",
        "outputId": "2d8c9f9a-0d45-4283-cd0b-3df815ef308e"
      },
      "execution_count": 2,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "'/device:GPU:0'"
            ],
            "application/vnd.google.colaboratory.intrinsic+json": {
              "type": "string"
            }
          },
          "metadata": {},
          "execution_count": 2
        }
      ],
      "id": "afAxKmXZ1kyz"
    },
    {
      "cell_type": "code",
      "source": [
        "drive.mount('/content/drive')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4aCoEleRGeC2",
        "outputId": "29f2891a-703e-4b5c-bd04-4800e24b2641"
      },
      "id": "4aCoEleRGeC2",
      "execution_count": 3,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Drive already mounted at /content/drive; to attempt to forcibly remount, call drive.mount(\"/content/drive\", force_remount=True).\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Processing**"
      ],
      "metadata": {
        "id": "qMC7biHIRIII"
      },
      "id": "qMC7biHIRIII"
    },
    {
      "cell_type": "code",
      "source": [
        "TARGET_SIZE = (224,224)\n",
        "BATCH_SIZE = 16\n",
        "TRAINING_DIR = \"/content/drive/MyDrive/Capstone/training\"\n",
        "VALIDATION_DIR = \"/content/drive/MyDrive/Capstone/validation\""
      ],
      "metadata": {
        "id": "_SRAbaGM1_2b"
      },
      "execution_count": 4,
      "outputs": [],
      "id": "_SRAbaGM1_2b"
    },
    {
      "cell_type": "code",
      "source": [
        "train_datagen = ImageDataGenerator(rescale = 1./255.,\n",
        "                                   shear_range = 0.2,\n",
        "                                   zoom_range = 0.2,\n",
        "                                   horizontal_flip = True)\n",
        "train_generator = train_datagen.flow_from_directory(directory=TRAINING_DIR,\n",
        "                                                      target_size=TARGET_SIZE,\n",
        "                                                      class_mode='categorical',\n",
        "                                                      batch_size=BATCH_SIZE,\n",
        "                                                      shuffle=False\n",
        "                                                      )\n",
        "  \n",
        "validation_datagen = ImageDataGenerator( rescale = 1./255. )\n",
        "validation_generator = validation_datagen.flow_from_directory(directory=VALIDATION_DIR,\n",
        "                                                                target_size=TARGET_SIZE,\n",
        "                                                                class_mode='categorical',\n",
        "                                                                batch_size=BATCH_SIZE,\n",
        "                                                                shuffle=False\n",
        "                                                                )  "
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "bqi8suNI2HJO",
        "outputId": "96a3a786-0a65-4bc1-fa47-57ade4ba8166"
      },
      "execution_count": 5,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Found 2844 images belonging to 2 classes.\n",
            "Found 317 images belonging to 2 classes.\n"
          ]
        }
      ],
      "id": "bqi8suNI2HJO"
    },
    {
      "cell_type": "code",
      "source": [
        "for cls, idx in train_generator.class_indices.items():\n",
        "    print('Class nr ',idx,' -> ', cls)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "iZ_97XVl2i_O",
        "outputId": "98a967e1-2241-49f9-866d-5d7dbc4e09d9"
      },
      "execution_count": 6,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Class nr  0  ->  crack\n",
            "Class nr  1  ->  pothole\n"
          ]
        }
      ],
      "id": "iZ_97XVl2i_O"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Model Resnet**"
      ],
      "metadata": {
        "id": "Z3MKyp0OFsaY"
      },
      "id": "Z3MKyp0OFsaY"
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.models import  Model, Sequential\n",
        "from keras import models, layers, optimizers\n",
        "from tensorflow.keras.applications import ResNet50\n",
        "#Load the ResNet50 model\n",
        "ResNet50_conv = ResNet50(weights='imagenet', include_top=False, input_shape=(224, 224, 3))\n",
        "\n",
        "for layer in ResNet50_conv.layers:\n",
        "    layer.trainable = True\n",
        "\n",
        "# Check the trainable status of the individual layers\n",
        "for layer in ResNet50_conv.layers:\n",
        "    print(layer, layer.trainable)\n",
        "\n",
        "# Create the model\n",
        "model = models.Sequential()\n",
        "# Add the Resnet50\n",
        "model.add(ResNet50_conv)\n",
        "\n",
        "# Add new layers\n",
        "model.add(layers.Flatten()),\n",
        "model.add(layers.Dense(512, activation='relu')),\n",
        "model.add(layers.Dense(32, activation='relu')),\n",
        "model.add(layers.Dense(32, activation='relu')),\n",
        "model.add(layers.Dropout(0.2)),\n",
        "model.add(layers.Dense(2, activation='softmax'))\n",
        "\n",
        "\n",
        "# Show a summary of the model. Check the number of trainable parameters\n",
        "model.summary()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "mGBUTJ1y365z",
        "outputId": "4713d025-ee21-403e-9650-2357f2bad7b1"
      },
      "execution_count": 7,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "<keras.engine.input_layer.InputLayer object at 0x7f97782ea590> True\n",
            "<keras.layers.reshaping.zero_padding2d.ZeroPadding2D object at 0x7f96e1b78880> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96e1b790c0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96e1b79480> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96e1b7b1c0> True\n",
            "<keras.layers.reshaping.zero_padding2d.ZeroPadding2D object at 0x7f96e1b7b9a0> True\n",
            "<keras.layers.pooling.max_pooling2d.MaxPooling2D object at 0x7f96e1b7a740> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd54dcf0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd54e8f0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd54fe80> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd54d0f0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd361030> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd54cf10> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96e1b78ee0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3624d0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96e1b782b0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3634c0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd3638e0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd363610> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3793f0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd37a2f0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3796f0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd37b040> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd37b970> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3793c0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3900a0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd392b60> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd392f80> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd390dc0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3a8bb0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd392650> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd391b10> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3a9ba0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3ab490> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3aab30> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3a8310> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3aace0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd3abee0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3c60b0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3c6020> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3c4ee0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd391360> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd391f30> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd378df0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd54dc30> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3c7340> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd54d510> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3c7a00> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3c5e40> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd361f90> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3eefe0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3ef820> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3f0760> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3efa30> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3f1b10> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3f2770> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3f3550> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3f3d30> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3f0be0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd3f08e0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd402170> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd402ec0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd403a00> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd400d30> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd418790> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd41a0b0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd41a4d0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd4183a0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd41b5b0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd41b0a0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd440cd0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd4422c0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd442e00> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd4420b0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd4432b0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd443be0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd441d50> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc70d540> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd440b80> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd440700> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd41a1a0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd360100> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd392710> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dd3f3b20> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc70eef0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc70ff70> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc70d630> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dd3f0940> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7188b0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd3f1e10> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc719420> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc71a770> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc71abc0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc71bc70> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc71b9d0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc719d50> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc71ac20> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7264d0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc726e60> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7275b0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc726c20> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc727eb0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc73d9f0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc73e410> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc73c130> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc73f7c0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc73f3d0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc73ea40> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc73f730> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7563b0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc757280> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc7576a0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc756380> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc76d540> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc755060> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc756e90> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc73ce50> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7276d0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc718220> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc70dde0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7540d0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc70fa60> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc76ce80> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc76d120> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc76f490> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc76c340> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc76fd00> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc76d360> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc76fbb0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7824d0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc783520> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc782560> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7825f0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc783370> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc79d930> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7831c0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc79d6f0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc79f190> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc79f610> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc79fdf0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc79ece0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc79feb0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7c0940> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7c2bc0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7c3d90> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7c3dc0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7c2c20> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7e2530> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7e39d0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc79ffa0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7e3160> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7c3250> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7e2d70> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc7e3220> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7e34c0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7e1840> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7e1d20> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7c1660> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7c1b70> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7e2050> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc79c340> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc79cc10> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc782ec0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dd3f1ae0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc781150> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc76e9b0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dd401d80> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc71a2f0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7fe6b0> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7ffee0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc7ffca0> True\n",
            "<keras.layers.convolutional.conv2d.Conv2D object at 0x7f96dc7ff610> True\n",
            "<keras.layers.normalization.batch_normalization.BatchNormalization object at 0x7f96dc7ff7f0> True\n",
            "<keras.layers.merging.add.Add object at 0x7f96dc7fe5c0> True\n",
            "<keras.layers.core.activation.Activation object at 0x7f96dc622140> True\n",
            "Model: \"sequential\"\n",
            "_________________________________________________________________\n",
            " Layer (type)                Output Shape              Param #   \n",
            "=================================================================\n",
            " resnet50 (Functional)       (None, 7, 7, 2048)        23587712  \n",
            "                                                                 \n",
            " flatten (Flatten)           (None, 100352)            0         \n",
            "                                                                 \n",
            " dense (Dense)               (None, 512)               51380736  \n",
            "                                                                 \n",
            " dense_1 (Dense)             (None, 32)                16416     \n",
            "                                                                 \n",
            " dense_2 (Dense)             (None, 32)                1056      \n",
            "                                                                 \n",
            " dropout (Dropout)           (None, 32)                0         \n",
            "                                                                 \n",
            " dense_3 (Dense)             (None, 2)                 66        \n",
            "                                                                 \n",
            "=================================================================\n",
            "Total params: 74,985,986\n",
            "Trainable params: 74,932,866\n",
            "Non-trainable params: 53,120\n",
            "_________________________________________________________________\n"
          ]
        }
      ],
      "id": "mGBUTJ1y365z"
    },
    {
      "cell_type": "code",
      "source": [
        "# Compile the model\n",
        "optimizer = tf.keras.optimizers.Adam(learning_rate=0.0001, epsilon=1e-7)\n",
        "model.compile(loss='categorical_crossentropy',optimizer=optimizer,metrics=['accuracy'])"
      ],
      "metadata": {
        "id": "lt43qdlz7mr7"
      },
      "execution_count": 8,
      "outputs": [],
      "id": "lt43qdlz7mr7"
    },
    {
      "cell_type": "code",
      "source": [
        "from keras.utils.vis_utils import plot_model\n",
        "\n",
        "plot_model(model, show_shapes=True, show_layer_names = True)\n",
        "from IPython.display import Image\n",
        "Image(filename='model.png')"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 865
        },
        "id": "bhBy_IAx8BTB",
        "outputId": "96e8e69e-f518-4adc-c341-92d02848e277"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<IPython.core.display.Image object>"
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ],
      "id": "bhBy_IAx8BTB"
    },
    {
      "cell_type": "code",
      "source": [
        "model_history = model.fit(train_generator, batch_size=16, epochs=8, verbose=1, validation_data=(validation_generator))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "0HlmgNUU8Fv7",
        "outputId": "8eccd2ad-fa28-419f-b80a-e053e7729c42"
      },
      "execution_count": 10,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Epoch 1/8\n",
            "178/178 [==============================] - 132s 480ms/step - loss: 0.6545 - accuracy: 0.7950 - val_loss: 0.9516 - val_accuracy: 0.4984\n",
            "Epoch 2/8\n",
            "178/178 [==============================] - 82s 461ms/step - loss: 0.2728 - accuracy: 0.9008 - val_loss: 0.9416 - val_accuracy: 0.3943\n",
            "Epoch 3/8\n",
            "178/178 [==============================] - 79s 446ms/step - loss: 0.2107 - accuracy: 0.9209 - val_loss: 1.1197 - val_accuracy: 0.4227\n",
            "Epoch 4/8\n",
            "178/178 [==============================] - 80s 443ms/step - loss: 0.1432 - accuracy: 0.9494 - val_loss: 1.3548 - val_accuracy: 0.6341\n",
            "Epoch 5/8\n",
            "178/178 [==============================] - 79s 442ms/step - loss: 0.0467 - accuracy: 0.9880 - val_loss: 0.6486 - val_accuracy: 0.7855\n",
            "Epoch 6/8\n",
            "178/178 [==============================] - 79s 442ms/step - loss: 0.0395 - accuracy: 0.9859 - val_loss: 0.3624 - val_accuracy: 0.9117\n",
            "Epoch 7/8\n",
            "178/178 [==============================] - 78s 436ms/step - loss: 0.0382 - accuracy: 0.9895 - val_loss: 0.4775 - val_accuracy: 0.8833\n",
            "Epoch 8/8\n",
            "178/178 [==============================] - 79s 442ms/step - loss: 0.0125 - accuracy: 0.9961 - val_loss: 0.3267 - val_accuracy: 0.9211\n"
          ]
        }
      ],
      "id": "0HlmgNUU8Fv7"
    },
    {
      "cell_type": "markdown",
      "source": [
        "ubah epoch dan dense layers"
      ],
      "metadata": {
        "id": "DZ93l9SbKMTc"
      },
      "id": "DZ93l9SbKMTc"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **File H5**"
      ],
      "metadata": {
        "id": "XZApLPWeU64V"
      },
      "id": "XZApLPWeU64V"
    },
    {
      "cell_type": "code",
      "source": [
        "save_model = \"model_CNN.h5\"\n",
        "model.save(save_model)\n",
        "print(\"Model Saved into\", save_model)"
      ],
      "metadata": {
        "id": "oAzcCUcGVBj8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "515ae18f-068f-412b-d012-b0e5bda8ff61"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Model Saved into model_CNN.h5\n"
          ]
        }
      ],
      "id": "oAzcCUcGVBj8"
    },
    {
      "cell_type": "code",
      "source": [
        "# And download it using this shortcut or from the \"Files\" panel to the left\n",
        "from google.colab import files\n",
        "\n",
        "files.download(\"model_CNN.h5\")"
      ],
      "metadata": {
        "id": "Xby4EgknaFI-",
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 34
        },
        "outputId": "19386ae2-ba6d-4769-bcec-d90557ff78b9"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "\n",
              "    async function download(id, filename, size) {\n",
              "      if (!google.colab.kernel.accessAllowed) {\n",
              "        return;\n",
              "      }\n",
              "      const div = document.createElement('div');\n",
              "      const label = document.createElement('label');\n",
              "      label.textContent = `Downloading \"${filename}\": `;\n",
              "      div.appendChild(label);\n",
              "      const progress = document.createElement('progress');\n",
              "      progress.max = size;\n",
              "      div.appendChild(progress);\n",
              "      document.body.appendChild(div);\n",
              "\n",
              "      const buffers = [];\n",
              "      let downloaded = 0;\n",
              "\n",
              "      const channel = await google.colab.kernel.comms.open(id);\n",
              "      // Send a message to notify the kernel that we're ready.\n",
              "      channel.send({})\n",
              "\n",
              "      for await (const message of channel.messages) {\n",
              "        // Send a message to notify the kernel that we're ready.\n",
              "        channel.send({})\n",
              "        if (message.buffers) {\n",
              "          for (const buffer of message.buffers) {\n",
              "            buffers.push(buffer);\n",
              "            downloaded += buffer.byteLength;\n",
              "            progress.value = downloaded;\n",
              "          }\n",
              "        }\n",
              "      }\n",
              "      const blob = new Blob(buffers, {type: 'application/binary'});\n",
              "      const a = document.createElement('a');\n",
              "      a.href = window.URL.createObjectURL(blob);\n",
              "      a.download = filename;\n",
              "      div.appendChild(a);\n",
              "      a.click();\n",
              "      div.remove();\n",
              "    }\n",
              "  "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.Javascript object>"
            ],
            "application/javascript": [
              "download(\"download_7466ba17-0643-4394-881b-5ca48e60dde9\", \"model_CNN.h5\", 900161240)"
            ]
          },
          "metadata": {}
        }
      ],
      "id": "Xby4EgknaFI-"
    },
    {
      "cell_type": "markdown",
      "source": [
        "# **Check**"
      ],
      "metadata": {
        "id": "8tClxEH9Hgt4"
      },
      "id": "8tClxEH9Hgt4"
    },
    {
      "cell_type": "code",
      "source": [
        "plt.figure(figsize=(14,8))\n",
        "plt.plot(model_history.history['accuracy'], 'bo-', linewidth=2, markersize=12)\n",
        "plt.plot(model_history.history['val_accuracy'], 'yo-', linewidth=2, markersize=12)\n",
        "plt.title('Model Accuracy', fontsize=14)\n",
        "plt.ylabel('Accuracy', fontsize=12)\n",
        "plt.xlabel('Epoch', fontsize=12)\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()\n",
        "\n",
        " # summarize history for loss\n",
        "plt.figure(figsize=(14,8))\n",
        "plt.plot(model_history.history['loss'], 'bo-', linewidth=2, markersize=12 )\n",
        "plt.plot(model_history.history['val_loss'], 'yo-', linewidth=2, markersize=12)\n",
        "plt.title('Model Loss', fontsize=14)\n",
        "plt.ylabel('Loss',fontsize=12)\n",
        "plt.xlabel('Epoch',fontsize=12)\n",
        "plt.legend(['train', 'test'], loc='upper left')\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 1000
        },
        "id": "hJprzCx4D32Y",
        "outputId": "0f03ccd6-7f43-474c-f3ff-5f7a21aef69e"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "iVBORw0KGgoAAAANSUhEUgAABIgAAALCCAYAAAC1P+jzAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjcuMSwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/bCgiHAAAACXBIWXMAAA9hAAAPYQGoP6dpAACfQklEQVR4nOzdeXhU5fnG8XtmMtnIxpIEwpIAsgRZBYKoFVSQCj8Ua1t3EBcQlapoqxR3RWptFVfAKoo71ipKoW4IioqiuCBCQCCsAyEQSEhCksnM+f1xSGJMApnJJGcm+X6u61xh3jnnzDM0lcmd931em2EYhgAAAAAAANBs2a0uAAAAAAAAANYiIAIAAAAAAGjmCIgAAAAAAACaOQIiAAAAAACAZo6ACAAAAAAAoJkjIAIAAAAAAGjmCIgAAAAAAACaOQIiAAAAAACAZo6ACAAAAAAAoJkjIAIAAE3OCy+8IJvNphdeeKFe97HZbBo+fHhAagIAAAhmBEQAAKDetm3bJpvNJpvNprZt26qsrKzG8zZs2FBxXlpaWuMW2cjOPPNM2Ww29e7d2+pSAAAAjouACAAABExYWJiys7O1dOnSGp9/7rnnZLfbZbc37Y8gW7du1YoVK2Sz2fTTTz/pq6++srokAACAY2ran84AAECjOuWUUxQfH6/58+dXe66srEwvv/yyRowYIafTaUF1jWf+/PkyDEO33HKLJDMYAwAACGYERAAAIGCioqJ00UUXacmSJdq3b1+V5/773/8qOztbV155Za3XFxYW6u6771bPnj0VGRmpVq1aacyYMfr8889rPD83N1fXXnutkpOTFR0drcGDB+vtt98+Zo1r167VRRddpHbt2ik8PFypqamaOnWqDhw44PsbroHH49ELL7yg1q1ba+bMmTrhhBP0+uuvq7CwsNZr3nnnHZ199tlq3bq1IiMjlZaWpssvv1zr1q2rcl5paakeffRRDR48WLGxsYqJiVGvXr00bdo0HTx4sOK8Y/VOSktLq7a874orrpDNZtPWrVv1z3/+U7169VJERISuuOIKSZLL5dLdd9+tk08+WUlJSYqIiFBaWpquu+66av8717VWr9er1NRUtW7dWiUlJTXe4/TTT1dYWJh27dpV698dAAAIDAIiAAAQUFdeeaXKysr00ksvVRmfP3++WrVqpXHjxtV4XXFxsc4880zdd999atGihW666Sadd955Wr58uYYNG6Z///vfVc4vKirS8OHDNW/ePHXt2lU33nijevTooQsvvFBvvvlmja/x7rvvKiMjQ++++66GDx+um266SX369NGTTz6poUOHVglZ/PX+++9r9+7duvDCCxUeHq7LL79chw8frlZ/uVtuuUXjxo3TmjVrNG7cON1888067bTT9NFHH+mjjz6qOO/IkSM688wzNW3aNOXl5WnixImaMmWKunfvrnnz5mn79u31rn3q1Kl68MEHNWjQoIq/G0n69NNP9c9//lPJycm6+OKLNXXqVHXt2lVz5szR0KFDlZeXV+U+danVbrfr6quvVm5urv7zn/9Uq2Xjxo1auXKlfvvb36pDhw71fm8AAOA4DAAAgHrKysoyJBmjRo0yDMMwevfubZx44okVz+/Zs8cICwszpk6dahiGYURERBipqalV7nHvvfcakoxLL73U8Hq9FePffvutER4ebiQkJBj5+fkV43fffbchybjmmmuq3Oe9994zJBmSjOeff75ifP/+/UZcXJzRvn17Y9u2bVWuee211wxJxg033FBlXJIxbNgwn/4ufve73xmSjFWrVhmGYRhbtmwxbDabcdppp1U7d/HixYYko0+fPsb+/furPOd2u429e/dWPL7lllsMScbll19ulJWVVTn30KFDxuHDh+tUd2pqarW/+wkTJhiSjA4dOhjbt2+vdk12dnaV+5dbsGCBIcl44IEHqozXtdbdu3cbYWFhxvDhw6vd+9ZbbzUkGYsWLarxfQAAgMBiBhEAAAi4K6+8skpz5gULFqisrOyYy8sWLFggp9Opv/3tb7LZbBXjAwYM0IQJE3To0CEtWrSoYvzFF19UeHi47rvvvir3GTVqlM4666xq93/xxReVn5+vWbNmKTU1tcpzF110kU466SS9/vrr/rzdCjk5OVq8eLG6d++uk08+WZLUpUsXnXrqqfrss8+0cePGKuc//fTTkqTHHntMrVu3rvJcWFiYkpOTJZn9m5555hnFx8frsccek8PhqHJufHy8YmJi6lW7JP35z39Wp06dqo0nJSXVeP/LL79ccXFxVWY6+VJrSkqKxo4dq08++USbN2+uOMftduvFF19Uu3btNGbMmHq/LwAAcHwERAAAIOAuu+wyOZ3OimbVzz//vAYMGKD+/fvXeH5+fr62bt2qE044ocblRGeccYYk6fvvv684PysrSyeccILatm1b7fzf/OY31ca+/PJLSdJXX32le+65p9pRXFys/fv3a//+/f68ZUlmyOV2u3X55ZdXGR8/frwkVWvevXr1akVERGjYsGHHvG9mZqYOHz6swYMHq2XLln7XdzwZGRm1PvfWW29p1KhRSkxMVFhYmGw2m+x2u/Lz8+VyufyudfLkyTIMQ88++2zF2Lvvvqt9+/Zp4sSJCgsLq9+bAgAAdcK/uAAAIOASExM1duxYvf766/rDH/6gjRs36oknnqj1/Pz8fEmqmDHza+3atatyXvnXpKSkGs+v6T65ubmSpKeeeuqYtRcWFqpNmzbHPKc2zz33nGw2W7WA6I9//KP+9Kc/6cUXX9TMmTMrQo+8vDy1b99edvuxf2dX3uOnffv2ftVVV7X9/f/zn//UrbfeqsTERJ199tnq0KGDoqKiJEmzZ8+u0mTa11rPPvtsde7cWQsWLNADDzygsLAwPfvss7LZbLrqqqvq+Y4AAEBdERABAIAGcdVVV+mtt97SFVdcocjISF166aW1nhsXFydJys7OrvH5vXv3Vjmv/GttO2jVdJ/ya3788Uf17t27ju+i7r744gtlZmZKUrVdwsrt3btXS5cu1bnnnitJSkhI0N69e+X1eo8ZEiUkJEiSdu/eXadabDabysrKanwuLy9P8fHxtV73a2VlZbr//vvVrl07ff/991VCOcMw9Pe//73etU6aNEnTp0/X4sWLNWjQIH3wwQc666yz1KVLlzrdAwAA1B9LzAAAQIMYNWqU2rdvr927d2vcuHHHXG4UFxenLl26aPPmzTUGCytWrJCkiiVqcXFx6ty5szZv3lwRHv3SypUrq40NGTJEkrRq1So/3s3xPffcc5Kkc845R1dddVW144ILLqhynmQu6SopKdEnn3xyzHv36NFDcXFx+vrrr+u001rLli1r/Hvctm2bDh065MO7kvbv36+8vDwNHTq02oytb775RkeOHKlXrZI0ceJEOZ1OPfvss5o/f768Xq+uueYan+oEAAD1Q0AEAAAahMPh0KJFi/T2229r1qxZxz1/woQJcrvdmj59ugzDqBhfu3atXnjhBcXHx2vcuHEV45dffrlKS0t11113VbnPBx98oGXLllW7/8SJExUbG6sZM2bop59+qvZ8UVFRRZ8iXxUUFOiNN95QixYt9MYbb+jZ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avTo0br00kuVm5tb37cOAAAAAAAsEGZ1AaFo715p9+6Gu39+vnn4Kz4+XuHh4YqOjlbbtm0lSZmZmZKk++67TyNHjqw4t1WrVurXr1/F4/vvv19vv/223n33Xd1www21vsYVV1yhiy++WJL04IMP6vHHH9fq1av129/+1v/CAQAAAACAJQiI/HA0c6nm8OH6BTvl4uKk2Ni6v64vBv1qGlJBQYHuueceLVmyRHv27FFZWZmOHDly3BlEffv2rfhzixYtFBcXp3379tW/QAAAAAAALOR2my1kMjOlggIpJkbq2VMaM0ZyOq2uruEEVUD06aef6uGHH9aaNWu0Z88evf322xo3btwxr1mxYoWmTZumn376SR07dtQdd9yhK664okHr/OabmscXLZLOP7/+93/xRem88+p/n5q0aNGiyuNbb71VH374of7xj3/ohBNOUFRUlH7/+9+rtLT0mPdx/ur/FTabTV5ft24DAAAAACBIuFzmzuRz5pj9hcPCJJtNMgyprExKTJSmTJEmT5ZSUqyuNvCCqgdRYWGh+vXrp6eeeqpO52dlZWnMmDE644wz9P333+umm27S1Vdfrffff7+BK63ZmDHmN0x9JCVJo0fXv5bw8HB56rCd2ueff64rrrhC559/vvr06aO2bdtq27Zt9S8AAAAAAIAQsWKF1KOHNHNm5eZTZWXmbKLyDcBzcszne/Qwz29qgmoG0TnnnKNzzjmnzufPnTtXnTt31j//+U9JUnp6uj777DM9+uijGjVqVEOVWSun00wTZ870b6t7u928PhBT1tLS0vTVV19p27ZtiomJqXV2T7du3fTWW29p7NixstlsuvPOO5kJBAAAAABoNlaskEaOlLxe8zgWj0cqKjLP//BDafjwxqiwcQTVDCJfrVq1SiNGjKgyNmrUKK1atarWa0pKSpSfn1/lCKTJk6WoKDPs8YXdLrVoIU2aFJg6br31VjkcDvXq1UuJiYm19hR65JFH1LJlS51yyikaO3asRo0apZNOOikwRQAAAAAAEMRcLmns2LqFQ+XKzz33XPP6piKoZhD5au/evUpOTq4ylpycrPz8fB05ckRRUVHVrpk1a5buvffeBqspJUVavNhME6W6fYPZ7eaxeHHg1jF27969WlBWU2+mtLQ0ffzxx1XGrr/++iqPf73kzDCMavc5dOiQX3UCAAAAAGCV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G8IhAADQ2PwKiO644w7179+/1ucHDBige++919+aAAAAmi3CIQAAYAW/AqI333xT55xzTq3Pjx49WgsXLvS7KAAAgOaIcAgAAFjFr4Box44d6tq1a63Pd+7cWdu3b/e7KAAAgOaGcAgAAFjJr4AoJibmmAFQVlaWIiMj/S4KAACgOSEcAgAAVvO7SfW8efO0e/fuas/t3LlTzzzzjM4444x6FwcAANDUEQ4BAIBgYDMMw/D1oo0bNyojI0M2m01XXXWVTjzxREnSunXrNH/+fBmGoS+//FLp6ekBLzjQ8vPzFR8fr7y8PMXFxVldDgAAaEYIhwAAQEPyJfMI8+cFevTooZUrV2rq1Kl69NFHqzx3+umn6/HHHw+JcAgAAMAqhEMAACCY+BUQSVLfvn31ySefaP/+/dq6daskqUuXLmrTpk3AigMAAGiKCIcAAECw8TsgKtemTRtCIQAAgDoiHAIAAMGoXgHRrl279N133ykvL09er7fa8+PHj6/P7QEAAJoUwiEAABCs/AqIiouLNWHCBP3nP/+R1+uVzWZTea9rm81WcR4BEQAAgIlwCAAABDO/trn/61//qrfeekszZ87UihUrZBiGFixYoA8++EDnnHOO+vXrpx9++CHQtQIAAIQkwiEAABDs/AqI3nzzTU2cOFG33XZbxRb37du314gRI/Tf//5XCQkJeuqppwJaKAAAQCgiHAIAAKHAr4Bo3759ysjIkCRFRUVJkgoLCyuev+CCC/TWW28FoDwAAIDQVXM49AThEAAACDp+BUTJyck6cOCAJCk6OlotW7bUxo0bK57Pz89XcXFxYCoEAAAIQbWHQzdYWBUAAEDN/GpSPWTIEH322We67bbbJEljx47Vww8/rHbt2snr9erRRx/VySefHNBCAQAAQgXhEAAACDV+zSD605/+pC5duqikpESSdP/99yshIUGXX365JkyYoPj4eD3++ON+F/XUU08pLS1NkZGRGjJkiFavXl3rucOHD5fNZqt2jBkzxu/XBwAA8BfhEAAACEU2o3x/+nryer368ccf5XA41LNnT4WF+TU5SQsXLtT48eM1d+5cDRkyRLNnz9a///1vbdy4UUlJSdXOz83NVWlpacXjAwcOqF+/fnr22Wd1xRVXHPf18vPzFR8fr7y8PMXFxflVMwAAgEQ4BAAAgosvmYfPM4iKior0u9/9Tq+88krVG9nt6tevn3r37u13OCRJjzzyiK655hpNnDhRvXr10ty5cxUdHa358+fXeH6rVq3Utm3biuPDDz9UdHS0/vCHP/hdAwAAgK8IhwAAQCjzOSCKjo7WRx99pKKiooAXU1paqjVr1mjEiBEVY3a7XSNGjNCqVavqdI/nnntOF110kVq0aFHj8yUlJcrPz69yAAAA1AfhEAAACHV+9SA67bTT6hzY+GL//v3yeDxKTk6uMp6cnKy9e/ce9/rVq1dr3bp1uvrqq2s9Z9asWYqPj684OnbsWO+6AQBA80U4BAAAmgK/AqInn3xSK1eu1B133KFdu3YFuia/Pffcc+rTp48yMjJqPWf69OnKy8urOHbu3NmIFQIAgKaEcAgAADQVfjUL6tevn8rKyjRr1izNmjVLYWFhioiIqHKOzWZTXl6eT/dt06aNHA6HsrOzq4xnZ2erbdu2x7y2sLBQr7/+uu67775jnhcREVGtVgAAAF8RDgEAgKbEr4DoggsukM1mC3QtCg8P18CBA7Vs2TKNGzdOkrk72rJly3TDDcf+sPXvf/9bJSUluuyyywJeFwAAwC8RDgEAgKbGr4DohRdeCHAZlaZNm6YJEyZo0KBBysjI0OzZs1VYWKiJEydKksaPH6/27dtr1qxZVa577rnnNG7cOLVu3brBagMAACAcAgAATZH/+9E3kAsvvFA5OTm66667tHfvXvXv31/vvfdeRePqHTt2yG6v2jpp48aN+uyzz/TBBx9YUTIAAGgmCIcAAEBTZTMMw/D1ohdffLFO540fP97nghpbfn6+4uPjlZeXp7i4OKvLAQAAQYpwCAAAhBpfMg+/AqJfz+CpcsNf9CbyeDy+3rrRERABAIDjIRwCAAChyJfMw68lZllZWdXGPB6Ptm3bpqefflo7duzQggUL/Lk1AABAUCEcAgAAzYFfM4iOZ8yYMUpLS9NTTz0V6FsHHDOIAABAbQiHAABAKPMl86h9rVg9/N///Z8WLlzYELcGAABoFIRDAACgOWmQgGjLli0qKSlpiFsDAAA0OMIhAADQ3PjVg+jTTz+tcfzQoUP69NNP9fjjj2vcuHH1qQsAAMAShEMAAKA58isgGj58eJXdysoZhiGHw6E//OEPeuKJJ+pdHAAAQGMyw6G7tH37AxVjhEMAAKA58CsgWr58ebUxm82mli1bKjU1lWbPAAAg5BAOAQCA5syvgGjYsGGBrgMAAMAyhEMAAKC586tJdVZWlhYvXlzr84sXL9a2bdv8rQkAAKDREA4BAAD4OYPo1ltvVX5+vsaOHVvj80899ZQSEhL0+uuv16s4AACAhkQ4BAAAYPJrBtGqVas0cuTIWp8/66yztHLlSr+LAgAAaGiEQwAAAJX8CogOHjyo2NjYWp+PiYnRgQMH/C4KAACgIREOAQAAVOVXQNSpUyd9/vnntT6/cuVKdejQwe+iAAAAGgrhEAAAQHV+BUQXX3yxXnvtNT3++OPyer0V4x6PR4899pgWLlyoSy65JGBFAgAABALhEAAAQM1shmEYvl5UUlKiMWPG6OOPP1ZiYqJ69OghSdq4caNycnI0fPhw/e9//1NERETACw60/Px8xcfHKy8vT3FxcVaXAwAAGgjhEAAAaG58yTz8mkEUERGhDz74QM8995wyMjK0f/9+7d+/XxkZGZo/f74++uijkAiHAABA80A4BAAAcGx+zSBqSphBBABA00Y4BAAAmqsGn0GUm5urtWvX1vr8jz/+qIMHD/pzawAAgIAhHAIAAKgbvwKim2++WZMmTar1+cmTJ+vWW2/1uygAAID6IhwCAACoO78Coo8//ljnnnturc+PHTtWH330kd9FAQAA1AfhEAAAgG/8CohycnLUpk2bWp9v3bq19u3b53dRAAAA/iIcAgAA8J1fAVG7du303Xff1fr8mjVrlJiY6HdRAAAA/iAcAgAA8I9fAdG4ceP03HPP6d1336323DvvvKPnn39e559/fr2LAwAAqCvCIQAAAP/5tc19Xl6eTjvtNK1fv179+vVT7969JUnr1q3T999/r169eumzzz5TQkJCoOsNOLa5BwAg9BEOAQAAVNfg29zHx8fryy+/1B133CG3260333xTb775ptxut+666y6tXr1afuROAAAAPiMcAgAAqD+/ZhDVpri4WIsXL9Yrr7yi9957T8XFxYG6dYNhBhEAAKGLcAgAAKB2vmQeYfV9McMwtGzZMr3yyit6++23dfjwYbVp00aXXHJJfW8NAABQK8IhAACAwPE7IFqzZo1eeeUVvf7669q7d69sNpsuuugi3XDDDTr55JNls9kCWScAAEAFwiEAAIDA8ikg2rp1q1555RW98sor+vnnn9W+fXtdeumlysjI0IUXXqgLLrhAQ4cObaha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\n"
          },
          "metadata": {}
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 1 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "id": "hJprzCx4D32Y"
    },
    {
      "cell_type": "code",
      "source": [
        "target_names = []\n",
        "for key in train_generator.class_indices:\n",
        "  target_names.append(key)\n",
        "\n",
        "print(target_names)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "tXbC-DIZEC41",
        "outputId": "f0557c7a-f0b5-453c-969e-87243e94d656"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "['crack', 'pothole']\n"
          ]
        }
      ],
      "id": "tXbC-DIZEC41"
    },
    {
      "cell_type": "code",
      "source": [
        "from sklearn.metrics import confusion_matrix\n",
        "from sklearn.metrics import classification_report\n",
        "import seaborn as sns"
      ],
      "metadata": {
        "id": "iX0ow9tBEXAo"
      },
      "execution_count": 13,
      "outputs": [],
      "id": "iX0ow9tBEXAo"
    },
    {
      "cell_type": "code",
      "source": [
        "accuracy = model.evaluate(validation_generator)\n",
        "print('n', 'Test_Accuracy:-', accuracy[1])\n",
        "pred = model.predict(validation_generator)\n",
        "y_pred = np.argmax(pred, axis=1)\n",
        "#y_true = np.argmax(pred, axis=1)\n",
        "print('confusion matrix')\n",
        "print(confusion_matrix(validation_generator.classes, y_pred))\n",
        "#confusion matrix\n",
        "f, ax = plt.subplots(figsize=(14,8))\n",
        "sns.heatmap(confusion_matrix(validation_generator.classes, y_pred), annot=True, fmt=\".0f\", ax=ax)\n",
        "plt.xlabel(\"y_pred\")\n",
        "plt.ylabel(\"y_true\")\n",
        "plt.show()"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 792
        },
        "id": "Hy0evsLfELRO",
        "outputId": "c830a700-a4ca-4006-bb07-897d8fa0203f"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "20/20 [==============================] - 6s 290ms/step - loss: 0.3267 - accuracy: 0.9211\n",
            "n Test_Accuracy:- 0.921135663986206\n",
            "20/20 [==============================] - 5s 223ms/step\n",
            "confusion matrix\n",
            "[[137  21]\n",
            " [  4 155]]\n"
          ]
        },
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<Figure size 1400x800 with 2 Axes>"
            ],
            "image/png": "\n"
          },
          "metadata": {}
        }
      ],
      "id": "Hy0evsLfELRO"
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "from google.colab import files\n",
        "from tensorflow.keras.utils import load_img, img_to_array\n",
        "\n",
        "uploaded = files.upload()\n",
        "\n",
        "class_names = ['crack', 'pothole']\n",
        "\n",
        "for fn in uploaded.keys():\n",
        " \n",
        "  # Memprediksi gambar\n",
        "  path = '/content/' + fn\n",
        "  img = load_img(path, target_size=(224, 224))\n",
        "  x = img_to_array(img)\n",
        "  x /= 255\n",
        "  x = np.expand_dims(x, axis=0)\n",
        "\n",
        "  images = np.vstack([x])\n",
        "  predictions = model.predict(images, batch_size=10)\n",
        "  predicted_class_index = np.argmax(predictions[0])\n",
        "  predicted_class = class_names[predicted_class_index]\n",
        "\n",
        "  print(f\"{fn} is {predicted_class}\")"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 107
        },
        "id": "FUVQfWzBFuYM",
        "outputId": "69ee62cd-b2d8-4b0f-d85c-6d6363fa749a"
      },
      "id": "FUVQfWzBFuYM",
      "execution_count": null,
      "outputs": [
        {
          "output_type": "display_data",
          "data": {
            "text/plain": [
              "<IPython.core.display.HTML object>"
            ],
            "text/html": [
              "\n",
              "     <input type=\"file\" id=\"files-3aeebc90-44d1-4085-886c-dc806c068bec\" name=\"files[]\" multiple disabled\n",
              "        style=\"border:none\" />\n",
              "     <output id=\"result-3aeebc90-44d1-4085-886c-dc806c068bec\">\n",
              "      Upload widget is only available when the cell has been executed in the\n",
              "      current browser session. Please rerun this cell to enable.\n",
              "      </output>\n",
              "      <script>// Copyright 2017 Google LLC\n",
              "//\n",
              "// Licensed under the Apache License, Version 2.0 (the \"License\");\n",
              "// you may not use this file except in compliance with the License.\n",
              "// You may obtain a copy of the License at\n",
              "//\n",
              "//      http://www.apache.org/licenses/LICENSE-2.0\n",
              "//\n",
              "// Unless required by applicable law or agreed to in writing, software\n",
              "// distributed under the License is distributed on an \"AS IS\" BASIS,\n",
              "// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n",
              "// See the License for the specific language governing permissions and\n",
              "// limitations under the License.\n",
              "\n",
              "/**\n",
              " * @fileoverview Helpers for google.colab Python module.\n",
              " */\n",
              "(function(scope) {\n",
              "function span(text, styleAttributes = {}) {\n",
              "  const element = document.createElement('span');\n",
              "  element.textContent = text;\n",
              "  for (const key of Object.keys(styleAttributes)) {\n",
              "    element.style[key] = styleAttributes[key];\n",
              "  }\n",
              "  return element;\n",
              "}\n",
              "\n",
              "// Max number of bytes which will be uploaded at a time.\n",
              "const MAX_PAYLOAD_SIZE = 100 * 1024;\n",
              "\n",
              "function _uploadFiles(inputId, outputId) {\n",
              "  const steps = uploadFilesStep(inputId, outputId);\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  // Cache steps on the outputElement to make it available for the next call\n",
              "  // to uploadFilesContinue from Python.\n",
              "  outputElement.steps = steps;\n",
              "\n",
              "  return _uploadFilesContinue(outputId);\n",
              "}\n",
              "\n",
              "// This is roughly an async generator (not supported in the browser yet),\n",
              "// where there are multiple asynchronous steps and the Python side is going\n",
              "// to poll for completion of each step.\n",
              "// This uses a Promise to block the python side on completion of each step,\n",
              "// then passes the result of the previous step as the input to the next step.\n",
              "function _uploadFilesContinue(outputId) {\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  const steps = outputElement.steps;\n",
              "\n",
              "  const next = steps.next(outputElement.lastPromiseValue);\n",
              "  return Promise.resolve(next.value.promise).then((value) => {\n",
              "    // Cache the last promise value to make it available to the next\n",
              "    // step of the generator.\n",
              "    outputElement.lastPromiseValue = value;\n",
              "    return next.value.response;\n",
              "  });\n",
              "}\n",
              "\n",
              "/**\n",
              " * Generator function which is called between each async step of the upload\n",
              " * process.\n",
              " * @param {string} inputId Element ID of the input file picker element.\n",
              " * @param {string} outputId Element ID of the output display.\n",
              " * @return {!Iterable<!Object>} Iterable of next steps.\n",
              " */\n",
              "function* uploadFilesStep(inputId, outputId) {\n",
              "  const inputElement = document.getElementById(inputId);\n",
              "  inputElement.disabled = false;\n",
              "\n",
              "  const outputElement = document.getElementById(outputId);\n",
              "  outputElement.innerHTML = '';\n",
              "\n",
              "  const pickedPromise = new Promise((resolve) => {\n",
              "    inputElement.addEventListener('change', (e) => {\n",
              "      resolve(e.target.files);\n",
              "    });\n",
              "  });\n",
              "\n",
              "  const cancel = document.createElement('button');\n",
              "  inputElement.parentElement.appendChild(cancel);\n",
              "  cancel.textContent = 'Cancel upload';\n",
              "  const cancelPromise = new Promise((resolve) => {\n",
              "    cancel.onclick = () => {\n",
              "      resolve(null);\n",
              "    };\n",
              "  });\n",
              "\n",
              "  // Wait for the user to pick the files.\n",
              "  const files = yield {\n",
              "    promise: Promise.race([pickedPromise, cancelPromise]),\n",
              "    response: {\n",
              "      action: 'starting',\n",
              "    }\n",
              "  };\n",
              "\n",
              "  cancel.remove();\n",
              "\n",
              "  // Disable the input element since further picks are not allowed.\n",
              "  inputElement.disabled = true;\n",
              "\n",
              "  if (!files) {\n",
              "    return {\n",
              "      response: {\n",
              "        action: 'complete',\n",
              "      }\n",
              "    };\n",
              "  }\n",
              "\n",
              "  for (const file of files) {\n",
              "    const li = document.createElement('li');\n",
              "    li.append(span(file.name, {fontWeight: 'bold'}));\n",
              "    li.append(span(\n",
              "        `(${file.type || 'n/a'}) - ${file.size} bytes, ` +\n",
              "        `last modified: ${\n",
              "            file.lastModifiedDate ? file.lastModifiedDate.toLocaleDateString() :\n",
              "                                    'n/a'} - `));\n",
              "    const percent = span('0% done');\n",
              "    li.appendChild(percent);\n",
              "\n",
              "    outputElement.appendChild(li);\n",
              "\n",
              "    const fileDataPromise = new Promise((resolve) => {\n",
              "      const reader = new FileReader();\n",
              "      reader.onload = (e) => {\n",
              "        resolve(e.target.result);\n",
              "      };\n",
              "      reader.readAsArrayBuffer(file);\n",
              "    });\n",
              "    // Wait for the data to be ready.\n",
              "    let fileData = yield {\n",
              "      promise: fileDataPromise,\n",
              "      response: {\n",
              "        action: 'continue',\n",
              "      }\n",
              "    };\n",
              "\n",
              "    // Use a chunked sending to avoid message size limits. See b/62115660.\n",
              "    let position = 0;\n",
              "    do {\n",
              "      const length = Math.min(fileData.byteLength - position, MAX_PAYLOAD_SIZE);\n",
              "      const chunk = new Uint8Array(fileData, position, length);\n",
              "      position += length;\n",
              "\n",
              "      const base64 = btoa(String.fromCharCode.apply(null, chunk));\n",
              "      yield {\n",
              "        response: {\n",
              "          action: 'append',\n",
              "          file: file.name,\n",
              "          data: base64,\n",
              "        },\n",
              "      };\n",
              "\n",
              "      let percentDone = fileData.byteLength === 0 ?\n",
              "          100 :\n",
              "          Math.round((position / fileData.byteLength) * 100);\n",
              "      percent.textContent = `${percentDone}% done`;\n",
              "\n",
              "    } while (position < fileData.byteLength);\n",
              "  }\n",
              "\n",
              "  // All done.\n",
              "  yield {\n",
              "    response: {\n",
              "      action: 'complete',\n",
              "    }\n",
              "  };\n",
              "}\n",
              "\n",
              "scope.google = scope.google || {};\n",
              "scope.google.colab = scope.google.colab || {};\n",
              "scope.google.colab._files = {\n",
              "  _uploadFiles,\n",
              "  _uploadFilesContinue,\n",
              "};\n",
              "})(self);\n",
              "</script> "
            ]
          },
          "metadata": {}
        },
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Saving Pothole_0039.jpg to Pothole_0039.jpg\n",
            "1/1 [==============================] - 0s 40ms/step\n",
            "Pothole_0039.jpg is pothole\n"
          ]
        }
      ]
    }
  ],
  "metadata": {
    "accelerator": "GPU",
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    },
    "language_info": {
      "codemirror_mode": {
        "name": "ipython",
        "version": 3
      },
      "file_extension": ".py",
      "mimetype": "text/x-python",
      "name": "python",
      "nbconvert_exporter": "python",
      "pygments_lexer": "ipython3",
      "version": "3.7.4"
    },
    "colab": {
      "provenance": []
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}